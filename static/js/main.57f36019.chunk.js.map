{"version":3,"sources":["constants.ts","Intersection.tsx","App.tsx","index.tsx"],"names":["EDGE_SEPARATOR","LANE_CLICK_RADIUS","IMAGE_URL","WIDTH","HEIGHT","names","split","LANE_MAP","forEach","_ref","i","_ref2","Object","slicedToArray","lane","x","y","name","Container","styled","div","_templateObject","Canvas","canvas","_templateObject2","Intersection","edges","height","imageUrl","laneMap","onEdgeUpdate","width","canvasRef","React","useRef","_React$useState","useState","_React$useState2","selectedLane","setSelectedLane","useEffect","current","ctx","getContext","save","font","lineWidth","strokeStyle","fillStyle","_i","_Object$keys","keys","length","edge","_edge$split","_edge$split2","start","end","a","b","moveTo","lineTo","stroke","fillRect","_i2","_Object$values","values","selected","fillText","restore","console","log","react_default","createElement","src","ref","onClick","e","bounds","getBoundingClientRect","clientX","left","clientY","top","closest","map","dx","dy","distance","Math","sqrt","pow","sort","App","setEdges","Fragment","connected","prev","objectSpread","defineProperty","JSON","stringify","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.57f36019.chunk.js","sourcesContent":["export const EDGE_SEPARATOR = '|';\nexport const LANE_CLICK_RADIUS = 20;\nexport const IMAGE_URL = 'https://i.imgur.com/i6tHnB9.png';\nexport const WIDTH = 385;\nexport const HEIGHT = 248;\n\nconst coordinates = [\n  [\n    156,\n    61\n  ],\n  [\n    192,\n    59\n  ],\n  [\n    221,\n    62\n  ],\n  [\n    251,\n    66\n  ],\n  [\n    345,\n    99\n  ],\n  [\n    346,\n    122\n  ],\n  [\n    341,\n    143\n  ],\n  [\n    339,\n    165\n  ],\n  [\n    249,\n    209\n  ],\n  [\n    220,\n    206\n  ],\n  [\n    188,\n    205\n  ],\n  [\n    150,\n    203\n  ],\n  [\n    54,\n    164\n  ],\n  [\n    57,\n    143\n  ],\n  [\n    56,\n    122\n  ],\n  [\n    55,\n    97\n  ]\n]\nconst names = 'ABCDEFGHIJKLMNOP'.split('');\n\nexport interface ILane {\n  x: number,\n  y: number;\n  name: string;\n}\n\nexport interface ILaneMap {\n  [id: string]: ILane;\n}\n\nexport const LANE_MAP: ILaneMap = {};\ncoordinates.forEach(([x, y], i) => {\n\tconst lane = {\n  \tx,\n    y,\n    name: names[i],\n  };\n  LANE_MAP[lane.name] = lane;\n});\n\nexport interface IEdges {\n  [key: string]: boolean | undefined;\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { EDGE_SEPARATOR, LANE_CLICK_RADIUS, ILane, ILaneMap, IEdges } from './constants';\n\ninterface IIntersectionProps {\n  edges: IEdges,\n  height: number,\n  imageUrl: string,\n  laneMap: ILaneMap,\n  onEdgeUpdate: (edge: string, connected: boolean) => void;\n  width: number,\n}\n\nconst Container = styled.div`\n  position: relative;\n`;\n\nconst Canvas = styled.canvas`\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n`;\n\nexport default function Intersection({\n  edges,\n  height,\n  imageUrl,\n  laneMap,\n  onEdgeUpdate,\n  width,\n}: IIntersectionProps) {\n  const canvasRef = React.useRef<HTMLCanvasElement>(null);\n  const [selectedLane, setSelectedLane] = React.useState<ILane | null>(null);\n\n  React.useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      return;\n    }\n    canvas.width = canvas.width; // hack to fully clear & reset canvas & context\n    const ctx = canvas.getContext('2d')!;\n    ctx.save();\n    ctx.font = '12px arial';\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = 'magenta';\n    ctx.fillStyle = 'magenta';\n    for (const edge of Object.keys(edges)) {\n      if (!edges[edge]) {\n        continue;\n      }\n      const [start, end] = edge.split(EDGE_SEPARATOR);\n      const a = laneMap[start];\n      const b = laneMap[end];\n      ctx.moveTo(a.x, a.y);\n      ctx.lineTo(b.x, b.y);\n      ctx.stroke();\n      ctx.fillRect(b.x - 5, b.y - 5, 10, 10);\n    }\n    for (const lane of Object.values(laneMap)) {\n      const selected = selectedLane && lane.name === selectedLane.name;\n      ctx.fillStyle = selected ? 'red' : 'black';\n      ctx.fillText(lane.name, lane.x - 12, lane.y - 6);\n    }\n    ctx.restore();\n    console.log('rendered');\n  });\n\n  const onCanvasClick = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      return;\n    }\n    const bounds = canvas.getBoundingClientRect();\n  \tconst x = e.clientX - bounds.left;\n    const y = e.clientY - bounds.top;\n    const sortedLanes = Object.values(laneMap)\n    \t.map(lane => {\n        const dx = x - lane.x;\n        const dy = y - lane.y;\n        return {\n          lane,\n          distance: Math.sqrt(dx ** 2 + dy ** 2),\n        };\n      })\n      .sort((a, b) => a.distance - b.distance);\n    const closest = sortedLanes[0];\n    if (closest.distance > LANE_CLICK_RADIUS) {\n      return;\n    }\n    const { lane } = closest;\n    if (selectedLane) {\n      // TODO: Link!\n      if (selectedLane.name !== lane.name) {\n        const edge = selectedLane.name + EDGE_SEPARATOR + lane.name;\n        onEdgeUpdate(edge, !edges[edge])\n      }\n      setSelectedLane(null);\n    } else {\n      setSelectedLane(lane);\n    }\n  };\n\n  return (\n    <Container>\n      <img src={imageUrl} width={width} height={height} />\n      <Canvas ref={canvasRef} width={width} height={height} onClick={onCanvasClick} />\n    </Container>\n  );\n}\n","import React from 'react';\nimport Intersection from './Intersection';\nimport { IMAGE_URL, WIDTH, HEIGHT, LANE_MAP, IEdges } from './constants';\n\nfunction App() {\n  const [edges, setEdges] = React.useState<IEdges>({\n    // ['A' + EDGE_SEPARATOR + 'L']: true,\n  });\n  function onEdgeUpdate(edge: string, connected: boolean) {\n    setEdges(prev => ({ ...prev, [edge]: connected }));\n  }\n  return (\n    <React.Fragment>\n      <Intersection\n        edges={edges}\n        height={HEIGHT}\n        imageUrl={IMAGE_URL}\n        laneMap={LANE_MAP}\n        onEdgeUpdate={onEdgeUpdate}\n        width={WIDTH}\n      />\n      <pre>{'DEBUG\\n-----\\n' + JSON.stringify({ edges }, null, 2)}</pre>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}