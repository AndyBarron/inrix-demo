{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","index.tsx"],"names":["_slicedToArray","arr","i","Array","isArray","_arrayWithHoles","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","value","length","err","_iterableToArrayLimit","TypeError","_nonIterableRest","__webpack_exports__","EDGE_SEPARATOR","LANE_CLICK_RADIUS","img","Image","addEventListener","container","appendChild","canvas","document","createElement","Object","assign","style","position","left","right","top","bottom","width","height","renderCanvas","selectedLane","debug","updateDebug","e","bounds","getBoundingClientRect","x","clientX","y","clientY","sortedLanes","lanes","map","lane","dx","dy","distance","Math","sqrt","pow","sort","a","b","closest","name","edge","edges","once","src","root","querySelector","ctx","names","split","laneMap","_ref","_ref2","getContext","save","clearRect","font","lineWidth","strokeStyle","fillStyle","_Object$keys","keys","_edge$split2","start","end","moveTo","lineTo","stroke","fillRect","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","selected","fillText","return","restore","innerHTML","JSON","stringify","join"],"mappings":"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","file":"static/js/main.4017d999.chunk.js","sourcesContent":["import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nexport default {};\n\nconst EDGE_SEPARATOR = '|';\nconst LANE_CLICK_RADIUS = 20;\nconst IMAGE_URL = 'https://i.imgur.com/i6tHnB9.png';\nconst img = new Image();\nimg.addEventListener('load', () => {\n  init();\n}, { once: true });\nimg.src = IMAGE_URL;\nconst root = document.querySelector('#root')!;\nconst container = document.createElement('div');\ncontainer.style.position = 'relative';\nroot.appendChild(container);\nlet canvas: HTMLCanvasElement = null!;\nlet ctx: CanvasRenderingContext2D = null!;\nconst coordinates = [\n  [\n    156,\n    61\n  ],\n  [\n    192,\n    59\n  ],\n  [\n    221,\n    62\n  ],\n  [\n    251,\n    66\n  ],\n  [\n    345,\n    99\n  ],\n  [\n    346,\n    122\n  ],\n  [\n    341,\n    143\n  ],\n  [\n    339,\n    165\n  ],\n  [\n    249,\n    209\n  ],\n  [\n    220,\n    206\n  ],\n  [\n    188,\n    205\n  ],\n  [\n    150,\n    203\n  ],\n  [\n    54,\n    164\n  ],\n  [\n    57,\n    143\n  ],\n  [\n    56,\n    122\n  ],\n  [\n    55,\n    97\n  ]\n]\n\nconst names = 'ABCDEFGHIJKLMNOP'.split('');\n\ninterface ILane {\n  x: number,\n  y: number;\n  name: string;\n}\n\ninterface ILaneMap {\n  [id: string]: ILane;\n}\n\nconst laneMap: ILaneMap = {};\nconst lanes = coordinates.map(([x, y], i) => {\n\tconst lane = {\n  \tx,\n    y,\n    name: names[i],\n  };\n  laneMap[lane.name] = lane;\n  return lane;\n});\n\nconst edges: { [key: string]: boolean | undefined } = {\n\t// ['A' + EDGE_SEPARATOR + 'L']: true,\n};\n\nfunction renderCanvas(selectedLane: ILane | null) {\n\tif (!ctx) {\n  \tctx = canvas.getContext('2d')!;\n  }\n  ctx.save();\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.font = '12px arial';\n  ctx.lineWidth = 3;\n  ctx.strokeStyle = 'magenta';\n  ctx.fillStyle = 'magenta';\n  for (const edge of Object.keys(edges)) {\n    if (!edges[edge]) {\n      continue;\n    }\n  \tconst [start, end] = edge.split(EDGE_SEPARATOR);\n    const a = laneMap[start];\n    const b = laneMap[end];\n    ctx.moveTo(a.x, a.y);\n    ctx.lineTo(b.x, b.y);\n    ctx.stroke();\n    ctx.fillRect(b.x - 5, b.y - 5, 10, 10);\n  }\n  for (const lane of lanes) {\n    const selected = selectedLane && lane.name === selectedLane.name;\n    ctx.fillStyle = selected ? 'red' : 'black';\n  \tctx.fillText(lane.name, lane.x - 12, lane.y - 6);\n  }\n  ctx.restore();\n}\n\nlet selectedLane: ILane | null = null;\n\nlet debug: HTMLElement = null!;\n\nfunction updateDebug() {\n  debug.innerHTML = [\n    JSON.stringify(edges, null, 2),\n    '---',\n    'selected lane:',\n    JSON.stringify(selectedLane, null, 2),\n  ].join('\\n')\n}\n\nfunction init() {\n\tcontainer.appendChild(img);\n  canvas = document.createElement('canvas');\n  Object.assign(canvas.style, {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n  });\n  canvas.width = img.width;\n  canvas.height = img.height;\n  container.appendChild(canvas);\n  renderCanvas(selectedLane);\n  debug = document.createElement('pre');\n  container.appendChild(debug);\n  updateDebug();\n  canvas.addEventListener('click', (e) => {\n    const bounds = canvas.getBoundingClientRect();\n  \tconst x = e.clientX - bounds.left;\n    const y = e.clientY - bounds.top;\n    const sortedLanes = lanes\n    \t.map(lane => {\n        const dx = x - lane.x;\n        const dy = y - lane.y;\n        return {\n          lane,\n          distance: Math.sqrt(dx ** 2 + dy ** 2),\n        };\n      })\n      .sort((a, b) => a.distance - b.distance);\n    const closest = sortedLanes[0];\n    if (closest.distance > LANE_CLICK_RADIUS) {\n      return;\n    }\n    const { lane } = closest;\n    if (selectedLane) {\n      // TODO: Link!\n      if (selectedLane.name !== lane.name) {\n        const edge = selectedLane.name + EDGE_SEPARATOR + lane.name;\n        edges[edge] = !edges[edge];\n      }\n      selectedLane = null;\n    } else {\n      selectedLane = lane;\n    }\n    renderCanvas(selectedLane);\n    updateDebug();\n  });\n}\n"],"sourceRoot":""}